Sorting Algorithm can be divided into two categories :-
   1. Space Used
   2. Stability

   On the basic of Space Used , The sorting algorithm can be of two types :-
     1. In - Place
     2. Out of the place

   On the basic of Stability , the sorting algorithm can be divided into two types :-
      1. Stable
      2. Unstable

   In place sorting algorithm :- which does not require any space for sorting.
   Example :- Bubble sort

   Out place sorting :- which require extra space for sorting
   Example :- Merge sort

   Stable sort :- If a sorting algorithm after sorting the content does not the
                  sequence of similar content in which they appear , then this sorting is called
                  stable sorting.
   Example :- Insertion sort

   Unstable sort :- If a sorting algorithm after sorting the content change the sequence of
                    similar content in which they appear , then it is called unstable sort.
   Example :- Quick Sort.

   Sorting Terminologies :-

    * Increasing Order :-
     - If successive element is greater than the previous one
     - Ex :- 1, 3, 5, 7, 9, 11

    * Decreasing Order :-
      - If successive element is less than the previous element.
      - Ex :- 11, 9, 7, 5, 3, 1

    * Non Increasing Order :-
      - If successive element is less than or equal to its previous element in the sequence
      - Ex :-  11, 9, 7, 5, 5, 3, 1

    * Non Decreasing Order :-
      - If successive element is greater than or equal to its previous element in the sequence.
      - Ex :- 1, 3, 5, 7, 7, 9, 11

    Different Sorting Algorithm :-
     - Bubble sort
     - Selection sort
     - Insertion sort
     - Bucket sort
     - Merge sort
     - Quick sort
     - Heap sort

   Which one to select ?

   We choose sorting algorithm according to the following criteria :-
    - Stability
    - Space efficient
    - Time efficient

  Bubble Sort :-
    - It is also known as sinking sort
    - we repeatedly compare the adjacent terms and swap them if they are wrong order.

  When to use bubbleSort :-
    - when input is almost sorted
    - when space is a concern
    - Easy to implement

  When to avoid Bubble sort :-
    - Average time complexity is poor.
