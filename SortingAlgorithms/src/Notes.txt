Sorting Algorithm can be divided into two categories :-
   1. Space Used
   2. Stability

   On the basic of Space Used , The sorting algorithm can be of two types :-
     1. In - Place
     2. Out of the place

   On the basic of Stability , the sorting algorithm can be divided into two types :-
      1. Stable
      2. Unstable

   In place sorting algorithm :- which does not require any space for sorting.
   Example :- Bubble sort

   Out place sorting :- which require extra space for sorting
   Example :- Merge sort

   Stable sort :- If a sorting algorithm after sorting the content does not the
                  sequence of similar content in which they appear , then this sorting is called
                  stable sorting.
   Example :- Insertion sort

   Unstable sort :- If a sorting algorithm after sorting the content change the sequence of
                    similar content in which they appear , then it is called unstable sort.
   Example :- Quick Sort.

   Sorting Terminologies :-

    * Increasing Order :-
     - If successive element is greater than the previous one
     - Ex :- 1, 3, 5, 7, 9, 11

    * Decreasing Order :-
      - If successive element is less than the previous element.
      - Ex :- 11, 9, 7, 5, 3, 1

    * Non Increasing Order :-
      - If successive element is less than or equal to its previous element in the sequence
      - Ex :-  11, 9, 7, 5, 5, 3, 1

    * Non Decreasing Order :-
      - If successive element is greater than or equal to its previous element in the sequence.
      - Ex :- 1, 3, 5, 7, 7, 9, 11

    Different Sorting Algorithm :-
     - Bubble sort
     - Selection sort
     - Insertion sort
     - Bucket sort
     - Merge sort
     - Quick sort
     - Heap sort

   Which one to select ?

   We choose sorting algorithm according to the following criteria :-
    - Stability
    - Space efficient
    - Time efficient

  1. Bubble Sort :-
    - It is also known as sinking sort
    - we repeatedly compare the adjacent terms and swap them if they are wrong order.

  When to use bubbleSort :-
    - when input is almost sorted
    - when space is a concern
    - Easy to implement

  When to avoid Bubble sort :-
    - Average time complexity is poor.

  2. Selection Sort :-
    - we repeatedly find the minimum element and move it to the sorted part
      to make the unsorted part sorted.

    When to use Selection sort :-
     - When we have insufficient memory.
     - Easy to implement.

    When to avoid using Selection sort :-
     - When time is a concern.

  3. Insertion Sort :-
       - we divide the array two parts ( sorted array and unsorted array )
       - then we take the first element from the array and find its correct position
       -  we keep on doing this until the unsorted array is empty

     when to use insertion sort :-
       - when we have insufficient space
       - Easy to implement
       - when we have continuous inflow of number and we want to keep them sorted

     when not to use them :-
       - when time is a concern

  4. Bucket Sort :-
       - Create Bucket and distribute element of array into buckets
       - Sort buckets individually
       - Merge Bucket after sorting

       - Number of buckets = Round(sqrt(number of array element))
       - Appropriate Bucket = ceil(Value * number of bucket/ maxValue)

     when to use bucket sort :-
       - when input is uniformly distributed over the range

     when not to use bucket sort :-
       - when space is a concern

  5. Merge Sort :-
       - Merge sort is a divide and conquer algorithm
       - Divide the input array into two half and keep on halving recursively until they become too
         short that we can not divide them further
       - Merge Half by sorting them

     when to use merge sort :-
       - when we need stable sort
       - when average time complexity is expected is O(NlogN)

     when not to use merge sort :-
       - when space is a concern

  6. Quick Sort :-
       - It is a divide and conquer algorithm
       - Find the pivot number and make sure all the less than pivot are on left
         and all the number greater than the pivot are on the right of the pivot
       - Unlike merge sort it does not require extra space

     when to use quick sort :-
       -  when the expected time complexity is O(NlogN)

     when to avoid using quick sort :-
       - when space is a concern ( due to recursive calls )
       - when you need a stable sort

             